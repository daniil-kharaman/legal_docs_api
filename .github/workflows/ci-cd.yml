name: Python CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/legal-docs-api

jobs:

  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_database
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan with bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -ll -f screen

      - name: Check dependencies with safety
        run: |
          safety check --json || true

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_database
          SECRET_KEY: test-secret-key-for-ci-cd-only
          GOOGLE_API_KEY: test-google-api-key
          GOOGLE_CREDENTIALS_JSON: '{"type":"service_account","project_id":"test","private_key":"-----BEGIN PRIVATE KEY-----\ntest\n-----END PRIVATE KEY-----\n","client_email":"test@test.iam.gserviceaccount.com"}'
          PROJECT_ID: test-project
          LOCATION: eu
          PROCESSOR_ID: test-processor
          DOCUMENT_AI_API_ENDPOINT: eu-documentai.googleapis.com
          TAVILY_API_KEY: test-tavily-key
          AWS_ACCESS_KEY: test-aws-access-key
          AWS_SECRET_KEY: test-aws-secret-key
          AWS_REGION: eu-north-1
          AWS_S3_BUCKET_NAME: test-bucket
        run: |
          pytest tests/ -v --cov --cov-report=html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

  deploy:
    name: Deploy to Server
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker tags
        id: meta
        run: |
          echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ env.DOCKER_REGISTRY }} -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest \
                       -t ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.COMMIT_SHA }} \
                       -t ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.DATE }} .
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.COMMIT_SHA }}
          docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.DATE }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy deployment files to EC2
        run: |
          scp -i ~/.ssh/ec2_key.pem docker-compose.prod.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/legal-docs-api/
          scp -i ~/.ssh/ec2_key.pem deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/legal-docs-api/

      - name: Deploy to EC2
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "cd ~/legal-docs-api && \
             chmod +x deploy.sh && \
             DOCKER_USERNAME='$DOCKER_USERNAME' DOCKER_PASSWORD='$DOCKER_PASSWORD' ./deploy.sh"
